[project]
name = "agent-lifecycle-toolkit"
requires-python = ">=3.10"
version = "0.4.0"
classifiers = [
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
readme = "README.md"
license-files = ["LICENSE*"]

dependencies = [
    "genson>=1.3.0",
    "ibm-watsonx-ai>=1.0.0",
    "jinja2>=3.1.6",
    "jsonschema>=4.0.0",
    "langchain-chroma>=0.1.4",
    "langchain-community>=0.3.21",
    "langchain-core>=0.3.72",
    "langchain-huggingface>=0.3.0",
    "litellm<2.0.0",
    "llm-sandbox[docker]>=0.2.5",
    "nestful-wrapper>=0.1.4",
    "nl2flow>=0.1.2",
    "nltk>=3.9.1",
    "openai>=1.0.0",
    "pydantic>=2.0.0",
    "scipy>=1.15.3",
    "sentence-transformers>=5.0.0",
    "smolagents>=1.21.3",
    "torch==2.2.2 ; sys_platform == 'darwin' and platform_machine == 'x86_64'",
    "torch>=2.5.1 ; sys_platform != 'darwin' or platform_machine != 'x86_64'",
    "transformers>=4.53.3",
    "trl>=0.12.2",
    "typing-extensions>=4.0.0",
]

description = "The Agent Lifecycle Toolkit (ALTK) is a library of components to help agent builders improve their agent with minimal integration effort and setup."
keywords = [
    "LLM",
    "NLP",
    "RAG",
    "data",
    "devtools",
    "index",
    "retrieval",
    "generation",
    "agent",
]

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["altk"]
exclude = [
    "*.md",
    "**/docs",
    "**/tests/",
    "**/*examples/",
    ".pre-commit-config.yaml",
    "MAINTAINERS",
    "pytest.ini",
    "**/site/",
    "*.jsonl",
    "*.png",
    "*.jpg",
    "*.jpeg"
]

[dependency-groups]
dev = [
    "docling>=2.38.1",
    "pre-commit>=4.2.0",
    "pytest>=8.2.1",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.14.1",
    "bertopic>=0.17.3",
    "scikit-learn>=1.7.1",
    "ruff>=0.13.2",
    "mellea>=0.0.6",
    "mypy>=1.18.2",
    "python-semantic-release~=10.4.1",
    "pandas-stubs>=2.3.2.250926",
    "types-pysocks>=1.7.1.20251001",
    "types-pyyaml>=6.0.12.20250915",
    "types-pygments>=2.19.0.20250809",
    "types-cachetools>=6.2.0.20250827",
    "types-cffi>=1.17.0.20250915",
    "types-grpcio>=1.0.0.20251009",
    "types-jsonschema>=4.25.1.20251009",
    "types-objgraph>=3.6.0.20240907",
    "types-protobuf>=6.32.1.20250918",
    "types-psutil>=7.0.0.20251001",
    "types-pyasn1>=0.6.0.20250914",
    "types-regex>=2025.9.18.20250921",
    "types-ujson>=5.10.0.20250822",
]

[project.optional-dependencies]
docs = [
    "mkdocs-material",
    "mkdocs-jupyter",
    "mkdocs-click",
    "mkdocstrings[python]",
    "griffe_inherited_docstrings",
    "griffe-pydantic",
    "mkdocs-awesome-nav",
    "mkdocs-include-markdown-plugin>=7.1.8",
    "mkdocs-enumerate-headings-plugin"
]

build = ["uv~=0.8.22"]

policy_guard = [
    "ibm_watsonx_ai>=1.3.28",
    "pydantic>=2.0.0",
]

post_tool_reflection = [
    "llm-sandbox[docker]>=0.2.5",
    "smolagents>=1.21.3",
    "genson>=1.3.0",
    "pydantic>=2.0.0",
    "langchain-chroma>=0.1.4",
    "langchain-community>=0.3.21",
    "langchain-core>=0.3.72",
    "langchain-huggingface>=0.3.0",
    "langchain-ibm>=0.3.15",
    "langchain-openai>=0.3.28",
]

pre_tool_guard = [
    "pydantic>=2.0.0",
]

pre_tool_reflection = [
    "pydantic>=2.0.0",
    "nestful-wrapper>=0.1.4",
    "jinja2>=3.1.6",
    "jsonschema>=4.0.0",
    "nl2flow>=0.1.2",
    "scipy>=1.15.3",
    "sentence-transformers>=5.0.0",
]

[[tool.uv.index]]
name = "pytorch-cu118"
url = "https://download.pytorch.org/whl/cu118"
explicit = true

[tool.ruff.lint]
select = [
    "E4",
    "E7",
    "E9",
    "F", # pyflakes
    "B", # flake8-bugbear
]
ignore = [
    "B905" # ignore requiring `strict` to be specified when using `zip`
]
unfixable = [
    "B" # don't attempt to fix bugbear issues
]
[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "E402", # ignore import violations
    "F401", # ignore unused import violations
]
"**/tests/*" = [
    "E402", # ignore import violations
    "F401", # ignore unused import violations
]

[tool.pytest.ini_options]
log_cli = true
addopts = "--ignore=test-case-generation-toolkit/test_case_generation_toolkit/utils/test_case_generation.py -m \"not llm and not refract_extra\""
markers = [
    "llm: marks tests as LLM provider tests (expensive, run only with -m llm)",
    "refract_extra: extra tests from refraction"
]

[tool.mypy]
ignore_errors = true

[tool.semantic_release]
allow_zero_version = true
major_on_zero = false
version_toml = ["pyproject.toml:project.version"]
commit_parser = "conventional"
build_command = """
    python -m pip install -e '.[build]'
    uv lock --upgrade-package "$PACKAGE_NAME"
    git add uv.lock
    uv build
"""
tag_format = "v{version}"
commit_message = "chore: bump version to {version} [skip ci]"

[tool.semantic_release.commit_parser_options]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
parse_squash_commits = true
ignore_merge_commits = true

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
exclude_commit_patterns = [
    '''chore(?:\([^)]*?\))?: .+''',
    '''ci(?:\([^)]*?\))?: .+''',
    '''refactor(?:\([^)]*?\))?: .+''',
    '''style(?:\([^)]*?\))?: .+''',
    '''test(?:\([^)]*?\))?: .+''',
    '''build\((?!deps\): .+)''',
    '''Initial [Cc]ommit.*''',
]

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"
output_format = "md"
